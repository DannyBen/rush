#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended


# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
rush_usage() {
  if [[ -n $long_usage ]]; then
    echo -e "rush - Personal package manager"
    echo 
  else
    echo -e "rush - Personal package manager"
    echo 
  fi
  echo -e "Usage:"
  echo -e "  rush [command] [options]"
  echo
  # :command.usage_commands
  echo -e "Commands:"
  echo "  add       Add a local package repository to the configuration"
  echo "  clone     Clone a GitHub package repository"
  echo "  remove    Remove a package repository to the configuration"
  echo "  config    Show the configuration file"
  echo "  get       Install a package"
  echo "  list      Shows packages in a repository or all repositories"
  echo "  pull      Perform git pull on one or all repositories"
  echo "  default   Set a default repository"
  echo

  if [[ -n $long_usage ]]; then
    echo -e "Options:"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    echo -e "    Show this help"
    echo
    echo "  --version"
    echo -e "    Show version number"
    echo





  fi
}

# :command.usage
rush_add_usage() {
  if [[ -n $long_usage ]]; then
    echo -e "rush add - Add a local package repository to the configuration"
    echo 
  else
    echo -e "rush add - Add a local package repository to the configuration"
    echo 
  fi
  echo -e "Usage:"
  echo -e "  rush add REPO PATH [options]"
  echo


  if [[ -n $long_usage ]]; then
    echo -e "Options:"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    echo -e "    Show this help"
    echo
    echo "  --version"
    echo -e "    Show version number"
    echo

    # :command.usage_args
    echo -e "Arguments:"
    
    # :argument.usage
    echo "  REPO"
    echo -e "    Repository name"
    echo
    
    # :argument.usage
    echo "  PATH"
    echo -e "    Path to the repository"
    echo

    # :command.usage_examples
    echo -e "Examples:"
    
    echo -e "  rush add default ~/rush-repos/default"
    echo

  fi
}


# :command.usage
rush_clone_usage() {
  if [[ -n $long_usage ]]; then
    echo -e "rush clone"
    echo 
    echo -e "  Clone a GitHub package repository\n  This command will clone the repository and add it to the configuration"
    echo 
  else
    echo -e "rush clone - Clone a GitHub package repository"
    echo 
  fi
  echo -e "Usage:"
  echo -e "  rush clone GITHUB_USER [PATH] [options]"
  echo


  if [[ -n $long_usage ]]; then
    echo -e "Options:"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    echo -e "    Show this help"
    echo
    echo "  --version"
    echo -e "    Show version number"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --ssh, -s"
    echo -e "    Clone using SSH instead of HTTPS"
    echo
    # :command.usage_args
    echo -e "Arguments:"
    
    # :argument.usage
    echo "  GITHUB_USER"
    echo -e "    Github user. This user is expected to have a repository named 'rush-repo'.\n    If you need to use a different name, use the 'user/repo' syntax."
    echo
    
    # :argument.usage
    echo "  PATH"
    echo -e "    Local path to clone the repository to\n    Default: ~/rush-repos/<github_user>/<github_repo>"
    echo

    # :command.usage_examples
    echo -e "Examples:"
    
    echo -e "  rush clone bobby"
    echo -e "  rush clone bobby/bobs-repo ./repos/bobby --ssh"
    echo

  fi
}


# :command.usage
rush_remove_usage() {
  if [[ -n $long_usage ]]; then
    echo -e "rush remove - Remove a package repository to the configuration"
    echo 
  else
    echo -e "rush remove - Remove a package repository to the configuration"
    echo 
  fi
  echo -e "Usage:"
  echo -e "  rush remove REPO [options]"
  echo


  if [[ -n $long_usage ]]; then
    echo -e "Options:"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    echo -e "    Show this help"
    echo
    echo "  --version"
    echo -e "    Show version number"
    echo

    # :command.usage_args
    echo -e "Arguments:"
    
    # :argument.usage
    echo "  REPO"
    echo -e "    Repository name"
    echo



  fi
}


# :command.usage
rush_config_usage() {
  if [[ -n $long_usage ]]; then
    echo -e "rush config - Show the configuration file"
    echo 
  else
    echo -e "rush config - Show the configuration file"
    echo 
  fi
  echo -e "Usage:"
  echo -e "  rush config [options]"
  echo


  if [[ -n $long_usage ]]; then
    echo -e "Options:"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    echo -e "    Show this help"
    echo
    echo "  --version"
    echo -e "    Show version number"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --edit, -e"
    echo -e "    Open the config file for editing"
    echo




  fi
}


# :command.usage
rush_get_usage() {
  if [[ -n $long_usage ]]; then
    echo -e "rush get - Install a package"
    echo 
  else
    echo -e "rush get - Install a package"
    echo 
  fi
  echo -e "Usage:"
  echo -e "  rush get PACKAGE [REPO] [options]"
  echo


  if [[ -n $long_usage ]]; then
    echo -e "Options:"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    echo -e "    Show this help"
    echo
    echo "  --version"
    echo -e "    Show version number"
    echo

    # :command.usage_args
    echo -e "Arguments:"
    
    # :argument.usage
    echo "  PACKAGE"
    echo -e "    Package name"
    echo
    
    # :argument.usage
    echo "  REPO"
    echo -e "    Repository name\n    If not provided, a repository named 'default' is assumed"
    echo

    # :command.usage_examples
    echo -e "Examples:"
    
    echo -e "  rush get ruby"
    echo -e "  rush get ruby centos"
    echo

  fi
}


# :command.usage
rush_list_usage() {
  if [[ -n $long_usage ]]; then
    echo -e "rush list - Shows packages in a repository or all repositories"
    echo 
  else
    echo -e "rush list - Shows packages in a repository or all repositories"
    echo 
  fi
  echo -e "Usage:"
  echo -e "  rush list [REPO] [options]"
  echo


  if [[ -n $long_usage ]]; then
    echo -e "Options:"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    echo -e "    Show this help"
    echo
    echo "  --version"
    echo -e "    Show version number"
    echo

    # :command.usage_args
    echo -e "Arguments:"
    
    # :argument.usage
    echo "  REPO"
    echo -e "    Repository name (leave empty for all)"
    echo



  fi
}


# :command.usage
rush_pull_usage() {
  if [[ -n $long_usage ]]; then
    echo -e "rush pull - Perform git pull on one or all repositories"
    echo 
  else
    echo -e "rush pull - Perform git pull on one or all repositories"
    echo 
  fi
  echo -e "Usage:"
  echo -e "  rush pull [REPO] [options]"
  echo


  if [[ -n $long_usage ]]; then
    echo -e "Options:"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    echo -e "    Show this help"
    echo
    echo "  --version"
    echo -e "    Show version number"
    echo

    # :command.usage_args
    echo -e "Arguments:"
    
    # :argument.usage
    echo "  REPO"
    echo -e "    Repository name"
    echo



  fi
}


# :command.usage
rush_default_usage() {
  if [[ -n $long_usage ]]; then
    echo -e "rush default - Set a default repository"
    echo 
  else
    echo -e "rush default - Set a default repository"
    echo 
  fi
  echo -e "Usage:"
  echo -e "  rush default REPO [options]"
  echo


  if [[ -n $long_usage ]]; then
    echo -e "Options:"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    echo -e "    Show this help"
    echo
    echo "  --version"
    echo -e "    Show version number"
    echo

    # :command.usage_args
    echo -e "Arguments:"
    
    # :argument.usage
    echo "  REPO"
    echo -e "    Repository name"
    echo



  fi
}



# :command.inspect_args
inspect_args() {
  echo args:
  for k in "${!args[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
}

# :command.user_lib
# :src/lib/abort.sh
abort() {
  red "$1"
  exit 1
}

# :src/lib/colors.sh
# ---
# Color functions
# This file is a part of Bashly standard library
#
# Usage:
# Use any of the functions below to color or format a portion of a string.
# 
#  echo "before $(red this is red) after"
#  echo "before $(green_bold this is green_bold) after"
#
# ---

red() { echo -e "\e[31m$*\e[0m" ; }
green() { echo -e "\e[32m$*\e[0m" ; }
yellow() { echo -e "\e[33m$*\e[0m" ; }
blue() { echo -e "\e[34m$*\e[0m" ; }
magenta() { echo -e "\e[35m$*\e[0m" ; }
cyan() { echo -e "\e[36m$*\e[0m" ; }
bold() { echo -e "\e[1m$*\e[0m" ; }
underlined() { echo -e "\e[4m$*\e[0m" ; }
red_bold() { echo -e "\e[1;31m$*\e[0m" ; }
green_bold() { echo -e "\e[1;32m$*\e[0m" ; }
yellow_bold() { echo -e "\e[1;33m$*\e[0m" ; }
blue_bold() { echo -e "\e[1;34m$*\e[0m" ; }
magenta_bold() { echo -e "\e[1;35m$*\e[0m" ; }
cyan_bold() { echo -e "\e[1;36m$*\e[0m" ; }
red_underlined() { echo -e "\e[4;31m$*\e[0m" ; }
green_underlined() { echo -e "\e[4;32m$*\e[0m" ; }
yellow_underlined() { echo -e "\e[4;33m$*\e[0m" ; }
blue_underlined() { echo -e "\e[4;34m$*\e[0m" ; }
magenta_underlined() { echo -e "\e[4;35m$*\e[0m" ; }
cyan_underlined() { echo -e "\e[4;36m$*\e[0m" ; }


# :src/lib/config.sh
# ---
# Config functions
# This file is a part of Bashly standard library
#
# Usage:
# - In your script, set the CONFIG_FILE variable. For rxample:
#   CONFIG_FILE=settings.ini.
#   If it is unset, it will default to 'config.ini'.
# - Use any of the functions below to access the config file.
# ---

# Create a new config file.
# There is normally no need to use this fucntion, it is used by othe rfunctions
# as needed.
config_init() {
  CONFIG_FILE=${CONFIG_FILE:=config.ini}
  [[ -f "$CONFIG_FILE" ]] || touch "$CONFIG_FILE"
}

# Get a value from the config
# Usage: result=$(config_get hello)
config_get() {
  key=$1
  regex="^$key\s*=\s*(.+)$"

  config_init
  
  while IFS= read -r line || [ -n "$line" ]; do
    if [[ $line =~ $regex ]]; then
      value="${BASH_REMATCH[1]}"
      break
    fi
  done < "$CONFIG_FILE"

  echo "$value"
}

# Add or update a key=value pair in the config.
# Usage: config_set key value
config_set() {
  key=$1
  shift
  value="$*"

  config_init

  regex="^($key)\s*=\s*.+$"
  output=""
  found_key=""
  
  while IFS= read -r line || [ -n "$line" ]; do
    newline=$line
    if [[ $line =~ $regex ]]; then
      found_key="${BASH_REMATCH[1]}"
      newline="$key = $value"
      output="$output$newline\n"
    elif [[ $line ]]; then
      output="$output$line\n"
    fi
  done < "$CONFIG_FILE"

  if [[ -z $found_key ]]; then
    output="$output$key = $value\n"
  fi

  echo -e "$output" > "$CONFIG_FILE"
}

# Delete a key from teh config.
# Usage: config_del key
config_del() {
  key=$1

  regex="^($key)\s*="
  output=""

  config_init

  while IFS= read -r line || [ -n "$line" ]; do
    newline=$line
    if [[ $line ]] && [[ ! $line =~ $regex ]]; then
      output="$output$line\n"
    fi
  done < "$CONFIG_FILE"

  echo -e "$output" > "$CONFIG_FILE"
}

# Show the config file
config_show() {
  config_init
  cat "$CONFIG_FILE"
}

# Return an array of the keys in the config file
# Usage:
#
#   for k in $(config_keys); do
#     echo "- $k = $(config_get "$k")";
#   done
#
config_keys() {
  regex="^(.*)\s*="

  config_init

  keys=()
  while IFS= read -r line || [ -n "$line" ]; do
    if [[ $line =~ $regex ]]; then
      key="${BASH_REMATCH[1]}"
      keys+=("$key")
    fi
  done < "$CONFIG_FILE"
  echo "${keys[@]}"
}



# :command.command_functions
# :command.function
rush_add_command() {
  # :src/add_command.sh
  repo=${args[repo]}
  path=${args[path]}
  
  config_set "$repo" "$path"
  config_show
}

# :command.function
rush_clone_command() {
  # :src/clone_command.sh
  # Collect variables
  path=${args[path]}
  repo_id=${args[github_user]}
  use_ssh=${args[--ssh]}
  
  # Get just the username to use as the repo key in the config
  repo_name=${repo_id%%/*}
  
  # Adjust repo_id - defaults to $user/rush-repo
  [[ $repo_id = "*/*" ]] || repo_id="$repo_id/rush-repo"
  
  # Set clone URL - ssh or https?
  if [[ $use_ssh ]]; then
    repo_url=git@github.com:$repo_id.git
  else
    repo_url=https://github.com/$repo_id.git
  fi
  
  # Set default path if not provided
  [[ $path ]] || path="$HOME/rush-repos/$repo_id"
  
  # Abort if target directory exists
  [[ -d $path ]] && abort "Directory $path already exists."
  
  set -e
  
  # Create the target directory
  mkdir -p "$path"
  git clone "$repo_url" "$path"
  
  # Save config
  config_set "$repo_name" "$path"
  config_show
}

# :command.function
rush_remove_command() {
  # :src/remove_command.sh
  repo=${args[repo]}
  config_del "$repo"
  config_show
}

# :command.function
rush_config_command() {
  # :src/config_command.sh
  editor="${EDITOR:-vi}"
  
  if [[ "${args[--edit]}" ]]; then
    "$editor" "$CONFIG_FILE"
  else
    cyan "# $CONFIG_FILE"
    config_show
  fi
}

# :command.function
rush_get_command() {
  # :src/get_command.sh
  # Collect variables
  repo=${args[repo]:-default}
  package=${args[package]}
  repo_path=$(config_get "$repo")
  package_path=$repo_path/$package
  script=$package_path/main
  
  # Verify we have everything we need
  [[ $repo_path ]] || abort "repo not found: $repo"
  [[ -d $package_path ]] || abort "package not found: $repo/$package"
  [[ -f $script ]] || abort "script not found: $script"
  
  # Run the script
  export REPO="$repo"
  echo "run $(green "$repo:$package")"
  cd "$package_path"
  ./main
}

# :command.function
rush_list_command() {
  # :src/list_command.sh
  show_repo_list() {
    repo="$1"
    repo_path=$(config_get "$repo")
  
    [[ $repo_path ]] || abort "Cannot find repo $repo"
    
    green "$repo:"
  
    for package in "$repo_path"/*/; do
      infofile="${package}info"
      regex="$repo_path/(.*)/"
      if [[ $package =~ $regex ]]; then
        package_name="${BASH_REMATCH[1]}"
  
        if [[ -f $infofile ]]; then
          printf "  %-26s $(head -1 "$infofile")\n" "$(blue "$package_name")"
        else
          printf "  %-26s (no info)\n" "$(blue "$package_name")"
        fi
      fi
    done
  
    echo
  }
  
  repo=${args[repo]}
  
  if [[ $repo ]]; then
    show_repo_list "$repo"
  else
    for k in $(config_keys); do
      show_repo_list "$k"
    done
  fi
}

# :command.function
rush_pull_command() {
  # :src/pull_command.sh
  repo=${args[repo]}
  
  pull_repo() {
    repo_path="$1"
  
    if [[ -d "$repo_path/.git" ]]; then
      echo -e "pull $(green "$repo_path")"
      git -C "$repo_path" pull
    else
      echo -e "skip $(blue "$repo_path") (not a git repo)"
    fi
  }
  
  if [[ $repo ]]; then
    repo_path=$(config_get "$repo")
    [[ $repo_path ]] || abort "no such repo: $repo"
    pull_repo "$repo_path"
  else
    for k in $(config_keys); do
      pull_repo "$(config_get "$k")"
    done
  fi
}

# :command.function
rush_default_command() {
  # :src/default_command.sh
  # Collect variables
  repo=${args[repo]}
  repo_path=$(config_get "$repo")
  
  # Verify we have everything we need
  [[ $repo_path ]] || abort "repo not found: $repo"
  
  config_set "default" "$repo_path"
  config_show
}


# :command.parse_args
parse_args() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v ) 
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    rush_usage
    exit 1
    ;;
  
  esac
  # :command.command_filter
  action=$1
  
  case $action in
  -* )
    ;;
  
  add | a )
    action="add"
    shift
    add_parse_args "$@"
    shift $#
    ;;    
  
  clone )
    action="clone"
    shift
    clone_parse_args "$@"
    shift $#
    ;;    
  
  remove | r )
    action="remove"
    shift
    remove_parse_args "$@"
    shift $#
    ;;    
  
  config | c )
    action="config"
    shift
    config_parse_args "$@"
    shift $#
    ;;    
  
  get | g )
    action="get"
    shift
    get_parse_args "$@"
    shift $#
    ;;    
  
  list | l )
    action="list"
    shift
    list_parse_args "$@"
    shift $#
    ;;    
  
  pull | p )
    action="pull"
    shift
    pull_parse_args "$@"
    shift $#
    ;;    
  
  default )
    action="default"
    shift
    default_parse_args "$@"
    shift $#
    ;;    
  
  * )
    rush_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_args_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      echo -e "invalid option: $key"
      exit 1
      ;;
  
    * )
      # :command.parse_args_case
      echo -e "invalid argument: $key"
      exit 1
      ;;
  
    esac
  done
}


# :command.parse_args_secondary
add_parse_args() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v ) 
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    rush_add_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[repo]=$1
    shift
  else
    echo -e "missing required argument: REPO\nusage: rush add REPO PATH [options]"
    exit 1
  fi
  
  if [[ $1 && $1 != -* ]]; then
    args[path]=$1
    shift
  else
    echo -e "missing required argument: PATH\nusage: rush add REPO PATH [options]"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_args_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      echo -e "invalid option: $key"
      exit 1
      ;;
  
    * )
      # :command.parse_args_case
      if [[ ! ${args[repo]} ]]; then
        args[repo]=$1
        shift
      elif [[ ! ${args[path]} ]]; then
        args[path]=$1
        shift
      else
        echo -e "invalid argument: $key"
        exit 1
      fi
      ;;
  
    esac
  done
}


# :command.parse_args_secondary
clone_parse_args() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v ) 
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    rush_clone_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[github_user]=$1
    shift
  else
    echo -e "missing required argument: GITHUB_USER\nusage: rush clone GITHUB_USER [PATH] [options]"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_args_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --ssh | -s )
      args[--ssh]=1
      shift
      ;;
  
  
    -* )
      echo -e "invalid option: $key"
      exit 1
      ;;
  
    * )
      # :command.parse_args_case
      if [[ ! ${args[github_user]} ]]; then
        args[github_user]=$1
        shift
      elif [[ ! ${args[path]} ]]; then
        args[path]=$1
        shift
      else
        echo -e "invalid argument: $key"
        exit 1
      fi
      ;;
  
    esac
  done
}


# :command.parse_args_secondary
remove_parse_args() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v ) 
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    rush_remove_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[repo]=$1
    shift
  else
    echo -e "missing required argument: REPO\nusage: rush remove REPO [options]"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_args_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      echo -e "invalid option: $key"
      exit 1
      ;;
  
    * )
      # :command.parse_args_case
      if [[ ! ${args[repo]} ]]; then
        args[repo]=$1
        shift
      else
        echo -e "invalid argument: $key"
        exit 1
      fi
      ;;
  
    esac
  done
}


# :command.parse_args_secondary
config_parse_args() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v ) 
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    rush_config_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_args_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --edit | -e )
      args[--edit]=1
      shift
      ;;
  
  
    -* )
      echo -e "invalid option: $key"
      exit 1
      ;;
  
    * )
      # :command.parse_args_case
      echo -e "invalid argument: $key"
      exit 1
      ;;
  
    esac
  done
}


# :command.parse_args_secondary
get_parse_args() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v ) 
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    rush_get_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[package]=$1
    shift
  else
    echo -e "missing required argument: PACKAGE\nusage: rush get PACKAGE [REPO] [options]"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_args_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      echo -e "invalid option: $key"
      exit 1
      ;;
  
    * )
      # :command.parse_args_case
      if [[ ! ${args[package]} ]]; then
        args[package]=$1
        shift
      elif [[ ! ${args[repo]} ]]; then
        args[repo]=$1
        shift
      else
        echo -e "invalid argument: $key"
        exit 1
      fi
      ;;
  
    esac
  done
}


# :command.parse_args_secondary
list_parse_args() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v ) 
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    rush_list_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_args_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      echo -e "invalid option: $key"
      exit 1
      ;;
  
    * )
      # :command.parse_args_case
      if [[ ! ${args[repo]} ]]; then
        args[repo]=$1
        shift
      else
        echo -e "invalid argument: $key"
        exit 1
      fi
      ;;
  
    esac
  done
}


# :command.parse_args_secondary
pull_parse_args() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v ) 
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    rush_pull_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_args_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      echo -e "invalid option: $key"
      exit 1
      ;;
  
    * )
      # :command.parse_args_case
      if [[ ! ${args[repo]} ]]; then
        args[repo]=$1
        shift
      else
        echo -e "invalid argument: $key"
        exit 1
      fi
      ;;
  
    esac
  done
}


# :command.parse_args_secondary
default_parse_args() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v ) 
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    rush_default_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[repo]=$1
    shift
  else
    echo -e "missing required argument: REPO\nusage: rush default REPO [options]"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_args_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      echo -e "invalid option: $key"
      exit 1
      ;;
  
    * )
      # :command.parse_args_case
      if [[ ! ${args[repo]} ]]; then
        args[repo]=$1
        shift
      else
        echo -e "invalid argument: $key"
        exit 1
      fi
      ;;
  
    esac
  done
}


# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e  

  # :src/initialize.sh
  CONFIG_FILE=${RUSH_CONFIG:-~/rush.ini}
}

# :command.run
run() {
  declare -A args
  parse_args "$@"

  if [[ $action == "add" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      rush_add_usage
    else
      rush_add_command
    fi
  
  elif [[ $action == "clone" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      rush_clone_usage
    else
      rush_clone_command
    fi
  
  elif [[ $action == "remove" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      rush_remove_usage
    else
      rush_remove_command
    fi
  
  elif [[ $action == "config" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      rush_config_usage
    else
      rush_config_command
    fi
  
  elif [[ $action == "get" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      rush_get_usage
    else
      rush_get_command
    fi
  
  elif [[ $action == "list" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      rush_list_usage
    else
      rush_list_command
    fi
  
  elif [[ $action == "pull" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      rush_pull_usage
    else
      rush_pull_command
    fi
  
  elif [[ $action == "default" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      rush_default_usage
    else
      rush_default_command
    fi
  
  elif [[ ${args[--version]} ]]; then
    version_command
  elif [[ ${args[--help]} ]]; then
    long_usage=yes
    rush_usage
  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
